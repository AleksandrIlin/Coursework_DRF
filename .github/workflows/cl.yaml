name: CI

on: [push, pull_request]


jobs:

  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Docker
        run: |
          sudo apt-get update
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          echo "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable" | 
          sudo tee /etc/apt/sources.list.d/docker.list
          sudo apt-get update
          sudo apt-get install -y docker-ce

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          echo "/usr/local/bin" >> $GITHUB_PATH  # Добавляем путь к docker-compose в PATH


      - name: Check Docker Compose version
        run: |
          docker-compose --version

      - name: Install dependencies
        run: |
          pip install flake8  # Установите линтер
          flake8 .  # Запустите линтинг

  test:
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.12'

      - name: Install Poetry
        run: |
          curl -sSL https://install.python-poetry.org | python3 -
          echo "$HOME/.local/bin" >> $GITHUB_PATH
      - name: Install dependencies
        run: |
          poetry install --no-root

      - name: Create .env file
        uses: SpicyPizza/create-envfile@v2.0
        with:
          file_name: .env
          fail_on_empty: true
          envkey_SECRET_KEY: ${{ secrets.SECRET_KEY }}
          envkey_DEBUG: ${{ secrets.DEBUG }}
          envkey_POSTGRES_DB: ${{ secrets.POSTGRES_DB }}
          envkey_POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
          envkey_POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}
          envkey_POSTGRES_HOST: ${{ secrets.POSTGRES_HOST }}
          envkey_POSTGRES_PORT: ${{ secrets.POSTGRES_PORT }}
          envkey_REDIS_URL: ${{ secrets.CELERY_RESULT_BACKEND }}
          envkey_ADMIN_EMAIL: ${{ secrets.ADMIN_EMAIL }}
          envkey_ADMIN_PASSWORD: ${{ secrets.ADMIN_PASSWORD }}
          envkey_TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_TOKEN }}
          envkey_CELERY_BROKER_URL: ${{ secrets.CELERY_BROKER_URL }}

      - name: Set up PostgreSQL
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client
          sudo service postgresql start
          sudo -u postgres psql -c "ALTER USER postgres PASSWORD '12345';"
          sudo -u postgres psql -c "CREATE DATABASE habit;"
          sudo -u postgres psql -c "CREATE ROLE runner WITH LOGIN PASSWORD '12345';"
          sudo -u postgres psql -c "GRANT ALL PRIVILEGES ON DATABASE habit TO runner;"
          sudo -u postgres psql -c "GRANT CREATE ON SCHEMA public TO runner;"

      - name: Run makemigrations
        run: |
          poetry run python manage.py makemigrations

      - name: Run migrate
        run: |
          poetry run python manage.py migrate

      - name: Run tests
        run: |
          poetry run python manage.py test

  build:
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker images
        run: |
          docker-compose build

  deploy:
    runs-on: ubuntu-latest
    needs: build
    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Deploy to server
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY}}
          SSH_PUBLIC_KEY: ${{ secrets.SSH_PUBLIC_KEY}}
          ROOT_PASSWORD: ${{ secrets.ROOT_PASSWORD}}
        run: |
          sshpass -p "${{ secrets.ROOT_PASSWORD}}" ssh -v -o StrictHostKeyChecking=no root@194.87.76.153 "cd /root/Coursework_DRF && git pull && poetry install && sudo systemctl restart nginx"
