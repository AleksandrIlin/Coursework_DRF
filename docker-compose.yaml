services:
  db:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
    restart: on-failure
    env_file:
      - .env
    expose:
      - "5432"
    volumes:
      - .pg_data:/etc/postgresql/16/main
    healthcheck:
      test: ["CMD-SHELL", "-c", "pg_isready -U $POSTGRES_USER"]
      interval: 10s
      retries: 5
      timeout: 5s

  redis:
    image: redis:latest
    restart: on-failure
    expose:
      - "6379"



  app:
    build: .
    tty: true
    ports:
     - "8000:8000"
    command: sh -c "sleep 10 && python3 manage.py migrate && python3 manage.py runserver 0.0.0.0:8000"
    depends_on:
      - db
    environment:
      DATABASE_URL: postgres://postgres:POSTGRES_PASSWORD@db:5432/POSTGRES_DB
    volumes:
      - .:/app
    env_file:
      - .env


  celery:
    build: .
    tty: true
    command: celery -A config worker --loglevel=info
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - .env

  celery_beat:
    build: .
    tty: true
    command: celery -A config beat --loglevel=info
    restart: on-failure
    volumes:
      - .:/app
    depends_on:
      - redis
      - db
      - app
    env_file:
      - .env

  nginx:
    build:
      context: ./nginx  # Указываем на директорию с Dockerfile для Nginx
      dockerfile: Dockerfile  # Указываем, что мы хотим использовать этот Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/html:/usr/share/nginx/html
    depends_on:
      - redis
      - db
      - app

volumes:
  pg_data: